// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rte.business.controller;

import com.rte.business.MixEnergy;
import com.rte.business.controller.MixEnergyController;
import com.rte.business.service.MixEnergyService;
import java.math.BigInteger;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect MixEnergyController_Roo_Controller_Json {
    
    @Autowired
    MixEnergyService MixEnergyController.mixEnergyService;
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MixEnergyController.showJson(@PathVariable("id") BigInteger id) {
        MixEnergy mixEnergy = mixEnergyService.findMixEnergy(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (mixEnergy == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(mixEnergy.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MixEnergyController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<MixEnergy> result = mixEnergyService.findAllMixEnergys();
        return new ResponseEntity<String>(MixEnergy.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MixEnergyController.createFromJson(@RequestBody String json) {
        MixEnergy mixEnergy = MixEnergy.fromJsonToMixEnergy(json);
        mixEnergyService.saveMixEnergy(mixEnergy);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MixEnergyController.createFromJsonArray(@RequestBody String json) {
        for (MixEnergy mixEnergy: MixEnergy.fromJsonArrayToMixEnergys(json)) {
            mixEnergyService.saveMixEnergy(mixEnergy);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MixEnergyController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        MixEnergy mixEnergy = MixEnergy.fromJsonToMixEnergy(json);
        if (mixEnergyService.updateMixEnergy(mixEnergy) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MixEnergyController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (MixEnergy mixEnergy: MixEnergy.fromJsonArrayToMixEnergys(json)) {
            if (mixEnergyService.updateMixEnergy(mixEnergy) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> MixEnergyController.deleteFromJson(@PathVariable("id") BigInteger id) {
        MixEnergy mixEnergy = mixEnergyService.findMixEnergy(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (mixEnergy == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        mixEnergyService.deleteMixEnergy(mixEnergy);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
