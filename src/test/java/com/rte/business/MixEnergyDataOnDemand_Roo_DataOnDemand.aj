// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rte.business;

import com.rte.business.MixEnergy;
import com.rte.business.MixEnergyDataOnDemand;
import com.rte.business.service.MixEnergyService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MixEnergyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MixEnergyDataOnDemand: @Component;
    
    private Random MixEnergyDataOnDemand.rnd = new SecureRandom();
    
    private List<MixEnergy> MixEnergyDataOnDemand.data;
    
    @Autowired
    MixEnergyService MixEnergyDataOnDemand.mixEnergyService;
    
    public MixEnergy MixEnergyDataOnDemand.getNewTransientMixEnergy(int index) {
        MixEnergy obj = new MixEnergy();
        setAutre(obj, index);
        setCharbon(obj, index);
        setConsommation(obj, index);
        setEch_comm_allemagne(obj, index);
        setEch_comm_angleterre(obj, index);
        setEch_comm_belgique(obj, index);
        setEch_comm_espagne(obj, index);
        setEch_comm_italie(obj, index);
        setEch_comm_suisse(obj, index);
        setEch_physiques(obj, index);
        setEolien(obj, index);
        setFioul(obj, index);
        setGaz(obj, index);
        setHydrolique(obj, index);
        setLogDate(obj, index);
        setNucleaire(obj, index);
        setPompage(obj, index);
        setPrevisionj(obj, index);
        setPrevisionj1(obj, index);
        setSolaire(obj, index);
        setTaux_co2(obj, index);
        return obj;
    }
    
    public void MixEnergyDataOnDemand.setAutre(MixEnergy obj, int index) {
        Double autre = new Integer(index).doubleValue();
        obj.setAutre(autre);
    }
    
    public void MixEnergyDataOnDemand.setCharbon(MixEnergy obj, int index) {
        Double charbon = new Integer(index).doubleValue();
        obj.setCharbon(charbon);
    }
    
    public void MixEnergyDataOnDemand.setConsommation(MixEnergy obj, int index) {
        Double consommation = new Integer(index).doubleValue();
        obj.setConsommation(consommation);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_allemagne(MixEnergy obj, int index) {
        Double ech_comm_allemagne = new Integer(index).doubleValue();
        obj.setEch_comm_allemagne(ech_comm_allemagne);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_angleterre(MixEnergy obj, int index) {
        Double ech_comm_angleterre = new Integer(index).doubleValue();
        obj.setEch_comm_angleterre(ech_comm_angleterre);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_belgique(MixEnergy obj, int index) {
        Double ech_comm_belgique = new Integer(index).doubleValue();
        obj.setEch_comm_belgique(ech_comm_belgique);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_espagne(MixEnergy obj, int index) {
        Double ech_comm_espagne = new Integer(index).doubleValue();
        obj.setEch_comm_espagne(ech_comm_espagne);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_italie(MixEnergy obj, int index) {
        Double ech_comm_italie = new Integer(index).doubleValue();
        obj.setEch_comm_italie(ech_comm_italie);
    }
    
    public void MixEnergyDataOnDemand.setEch_comm_suisse(MixEnergy obj, int index) {
        Double ech_comm_suisse = new Integer(index).doubleValue();
        obj.setEch_comm_suisse(ech_comm_suisse);
    }
    
    public void MixEnergyDataOnDemand.setEch_physiques(MixEnergy obj, int index) {
        Double ech_physiques = new Integer(index).doubleValue();
        obj.setEch_physiques(ech_physiques);
    }
    
    public void MixEnergyDataOnDemand.setEolien(MixEnergy obj, int index) {
        Double eolien = new Integer(index).doubleValue();
        obj.setEolien(eolien);
    }
    
    public void MixEnergyDataOnDemand.setFioul(MixEnergy obj, int index) {
        Double fioul = new Integer(index).doubleValue();
        obj.setFioul(fioul);
    }
    
    public void MixEnergyDataOnDemand.setGaz(MixEnergy obj, int index) {
        Double gaz = new Integer(index).doubleValue();
        obj.setGaz(gaz);
    }
    
    public void MixEnergyDataOnDemand.setHydrolique(MixEnergy obj, int index) {
        Double hydrolique = new Integer(index).doubleValue();
        obj.setHydrolique(hydrolique);
    }
    
    public void MixEnergyDataOnDemand.setLogDate(MixEnergy obj, int index) {
        Date logDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLogDate(logDate);
    }
    
    public void MixEnergyDataOnDemand.setNucleaire(MixEnergy obj, int index) {
        Double nucleaire = new Integer(index).doubleValue();
        obj.setNucleaire(nucleaire);
    }
    
    public void MixEnergyDataOnDemand.setPompage(MixEnergy obj, int index) {
        Double pompage = new Integer(index).doubleValue();
        obj.setPompage(pompage);
    }
    
    public void MixEnergyDataOnDemand.setPrevisionj(MixEnergy obj, int index) {
        Double previsionj = new Integer(index).doubleValue();
        obj.setPrevisionj(previsionj);
    }
    
    public void MixEnergyDataOnDemand.setPrevisionj1(MixEnergy obj, int index) {
        Double previsionj1 = new Integer(index).doubleValue();
        obj.setPrevisionj1(previsionj1);
    }
    
    public void MixEnergyDataOnDemand.setSolaire(MixEnergy obj, int index) {
        Double solaire = new Integer(index).doubleValue();
        obj.setSolaire(solaire);
    }
    
    public void MixEnergyDataOnDemand.setTaux_co2(MixEnergy obj, int index) {
        Double taux_co2 = new Integer(index).doubleValue();
        obj.setTaux_co2(taux_co2);
    }
    
    public MixEnergy MixEnergyDataOnDemand.getSpecificMixEnergy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MixEnergy obj = data.get(index);
        BigInteger id = obj.getId();
        return mixEnergyService.findMixEnergy(id);
    }
    
    public MixEnergy MixEnergyDataOnDemand.getRandomMixEnergy() {
        init();
        MixEnergy obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return mixEnergyService.findMixEnergy(id);
    }
    
    public boolean MixEnergyDataOnDemand.modifyMixEnergy(MixEnergy obj) {
        return false;
    }
    
    public void MixEnergyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = mixEnergyService.findMixEnergyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MixEnergy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MixEnergy>();
        for (int i = 0; i < 10; i++) {
            MixEnergy obj = getNewTransientMixEnergy(i);
            try {
                mixEnergyService.saveMixEnergy(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
